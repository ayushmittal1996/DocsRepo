java.util-->Collection Framework

If Elements numbers are fixed always go for Arrays since array is fast compare to Collection.

Drawback:
•	Array can store only one type of data-type
•	Inserting and deleting elements in the middle of the array is difficult.
•	Size fixed
>No methods to process the retrieved data

Q1.	What is a collection framework?
Ans: A collection framework is a class library to handle group of objects. Collection Framework is implemented in java.util package
A collection object or an container object is an object which can store a group of other objects.

Q2.	What is a Collections?
Ans: Collections is an Class which is present inside the java.util package.
It contains polymorphic algorithms that operate on collections, "wrappers", which return a new collection backed by a specified collection.
	Java Collection class supports the polymorphic algorithms that operate on collections.
	Java Collection class throws a NullPointerException if the collections or class objects provided to them are null.

Q3.	Does collection object store copies of other objects or their references?
Ans: Collection object does not store the physical copies of other object, it simply store the references of other objects into a collection object.
                                        
  Collections Hierarchy:
  ====================================================================
                      java.util Collection<I> --> Extends------> Iterable<I>
                                       
                  List<I>                            Queue<I>[FIFO]             Set<I>
     
     ArrayList||Stack||Vector||LinkedList       LinkedList                HashSet||LinkedHashSet||TressSet(Sorted)
     
     
     
        Map<I>
 
                      Sorted Map 
 
 HashMap|| HashTable || TreeMap
 =============================================================================================================
 
 int a[]=new int[5];
		
		Object valuesOther[]=new Object[4];
		valuesOther[0]="Kingshuk";
		valuesOther[1]=2;
		valuesOther[2]=4.77;
		
		
		Collection values=new ArrayList<>();
		
		//Traversing of Arraylist
		List list=new ArrayList<>();
		//Conventional For Loop
		for (int i=0;i<list.size();i++) {
			Object object = list.get(i);		
		}	
		//By while loop-- Iterator is a very old Technique
		Iterator iterator=list.iterator();		
		while (iterator.hasNext()) {
			Object object = (Object) iterator.next();			
		}		
		//Enhanced For Loop
		for(Object i:list) {
			System.out.println(i);
		}	
		//Stream API using Lambda Expression-- Java 8 onwards
		list.forEach(System.out::println);
	
		
		//Working with Vector
		Vector v=new Vector<>();
	
		v.size();
		System.out.println("Size:"+v.capacity());
		
		List<Integer> listOther=Arrays.asList(56,24,33,25);
		
		List<Integer> listOtherNew=new ArrayList<Integer>() {
			{
				add(23);
				add(45);
				add(76);
			}
		};
		
		Collections.synchronizedList(new ArrayList<>());
		Stack<Integer> stack=new Stack<Integer>();
		stack.isEmpty();//Out=boolean/If Stack empty then True else False
		stack.peek();//Out=Element/Returns Top Most Object without removing it
		stack.pop();//Out=Element/pops the top most element and returns it
		stack.push(23);//Out=Element/pushes an element on the top of the stack and returns that element
		stack.search(45);//Out=int/Returns the position of the element from the top of the stack
							//If object is not found then returns -1.
	
