Test Class:
@BeforeMethod
	public void setUp() {
		RestAssured.baseURI = "http://10.12.40.220";
		RestAssured.defaultParser = Parser.JSON;
		ArrayList<Filter> filters = new ArrayList<Filter>(RestAssured.filters());
		filters.add(new CookieFilter());
		filters.add(new RequestLoggingFilter());
		filters.add(new ResponseLoggingFilter());
		RestAssured.filters(filters);
	}

@Test
	public void placeOrderWithOneItem(ITestContext context) {
		User user = registerRandomUser();
		loginUser(user);
		context.setAttribute("currentUser", user);

		// add items id with quantity
		Map<String, Integer> items = new HashMap<String, Integer>();
		items.put(P1, 1);

		addItemsToCart(items);
		verifyCart(items);
		addShippingAddress(new Generator<Address>(Address.class).generate());
		addCardDetails(new Generator<Card>(Card.class).generate());
		placeOrder();
		verifyOrder(items);
	}

@Test
	public void updateDeleteFromCart(ITestContext context) {
		User user = registerRandomUser();
		context.setAttribute("currentUser", user);

		Map<String, Integer> items = new HashMap<String, Integer>();
		items.put(P1, 1);
		items.put(P2, 1);
		addItemsToCart(items);
		verifyCart(items);

		// update cart
		items.put(P1, 4);
		updateCart(items);
		verifyCart(items);
		
		items.put(P1, 2);
		updateCart(items);
		verifyCart(items);

		// remove from cart
		items.remove(P2);
		deleteFromCart(P2);
		verifyCart(items);

		// add address
		addShippingAddress(new Generator<Address>(Address.class).generate());

		// add card details
		addCardDetails(new Generator<Card>(Card.class).generate());

		// place order
		placeOrder();

		// verify order
		verifyOrder(items);
	}
  
  @Test
	public void placeOrderWithMultipleItems(ITestContext context) {
		User user = registerRandomUser();
		context.setAttribute("currentUser", user);
		Map<String, Integer> items = new HashMap<String, Integer>();
		items.put(P1, 1);
		items.put(P2, 2);
		addItemsToCart(items);
		verifyCart(items);
		addShippingAddress(new Generator<Address>(Address.class).generate());
		addCardDetails(new Generator<Card>(Card.class).generate());
		placeOrder();
		verifyOrder(items);
	}

	@AfterMethod(alwaysRun = true)
	public void clearData(ITestContext context) {

		// delete user
		if (context.getAttribute("currentUser") != null) {
			RestAssureSteps
					.deleteUser(((User) context.getAttribute("currentUser")).getId());
		}
		context.setAttribute("currentUser", null);

		// delete all cookies
		RestAssured.reset();
	}
===================================================================================
public static User registerRandomUser() {
		User bean = new Generator<User>(User.class).generate();
		String id = given().contentType(ContentType.JSON).body(bean).when()
				.post("/register").then().statusCode(200)
				.body("id", Matchers.notNullValue()).and().extract().path("id");
		bean.setId(id);
		return bean;
	}

	public static void loginUser(User userBean) {
		given().auth().preemptive().basic(userBean.getUserName(), userBean.getPassword())
				.when().get("/login").then().statusCode(200)
				.cookie("logged_in", Matchers.notNullValue());

	}

public static User registerRandomUser() {
		User bean = new Generator<User>(User.class).generate();
		String id = given().contentType(ContentType.JSON).body(bean).when()
				.post("/register").then().statusCode(200)
				.body("id", Matchers.notNullValue()).and().extract().path("id");
		bean.setId(id);
		return bean;
	}

	public static void loginUser(User userBean) {
		given().auth().preemptive().basic(userBean.getUserName(), userBean.getPassword())
				.when().get("/login").then().statusCode(200)
				.cookie("logged_in", Matchers.notNullValue());

	}


public static void addShippingAddress(Address address) {
		given().contentType(ContentType.JSON).body(address).when().post("/addresses")
				.then().statusCode(200);
	}

	public static void addCardDetails(Card card) {
		given().contentType(ContentType.JSON).body(card).when().post("/cards").then()
				.statusCode(200);
	}

	public static void addItemsToCart(Map<String, Integer> items) {
		items.forEach((id, quantity) -> {
			for (int i = 0; i < quantity; ++i) {
				Map<String, String> map = new HashMap<>();
				map.put("id", id);
				given().contentType(ContentType.JSON).body(map).when().post("/cart")
						.then().statusCode(201);
			}
		});
	}
public static void verifyCart(Map<String, Integer> expecteditems) {
		Response response = when().get("/cart");
		assertEquals(response.getStatusCode(), 200);
		JsonArray array =
				new JsonParser().parse(response.getBody().asString()).getAsJsonArray();
		assertEquals(array.size(), expecteditems.size());
		for (int i = 0; i < array.size(); ++i) {
			JsonObject obj = array.get(i).getAsJsonObject();
			String actualId = obj.get("itemId").getAsString();
			int actualQuantity = obj.get("quantity").getAsInt();
			assertThat(expecteditems, Matchers.hasEntry(actualId, actualQuantity));
		}
	}

	public static void updateCart(Map<String, Integer> items) {
		items.forEach((id, quantity) -> {
			for (int i = 0; i < quantity; ++i) {
				Map<String, String> map = new HashMap<>();
				map.put("id", id);
				map.put("quantity", String.valueOf(quantity));
				given().contentType(ContentType.JSON).body(map).when()
						.post("/cart/update").then().statusCode(202);
			}
		});
	}

public static void deleteFromCart(String id) {
		when().delete("/cart/" + id).then().statusCode(202);
	}

	public static void verifyOrder(Map<String, Integer> expecteditems) {
		Response response =
				when().get("/orders").then().statusCode(201).and().extract().response();
		assertEquals(response.getStatusCode(), 201);
		JsonArray array =
				new JsonParser().parse(response.getBody().asString()).getAsJsonArray();
		assertThat(array.size(), Matchers.greaterThanOrEqualTo(1));
		JsonObject order = array.get(0).getAsJsonObject();
		assertThat(order.get("items").getAsJsonArray().size(),
				Matchers.equalTo(expecteditems.size()));
		JsonArray actualItems = order.get("items").getAsJsonArray();
		for (int i = 0; i < actualItems.size(); ++i) {
			JsonObject obj = actualItems.get(i).getAsJsonObject();
			String actualId = obj.get("itemId").getAsString();
			int actualQuantity = obj.get("quantity").getAsInt();
			assertThat(expecteditems, Matchers.hasEntry(actualId, actualQuantity));
		}
	}

	public static void deleteUser(String id) {
		when().delete("/customers/" + id).then().statusCode(200)
				.content(Matchers.containsString("true"));
	}

	public static void placeOrder() {
		when().post("/orders").then().statusCode(201);
	}
=====================================================================

Very Basics:
public class ApiSuite {
	
	@BeforeMethod
	public void setUp(){
		RestAssured.baseURI="https://www.googleapis.com/gmail/v1/users";
		RestAssured.defaultParser=Parser.JSON;
		ArrayList<Filter> filters=new ArrayList();
		filters.add(new CookiesFilter());
		RestAssured.filters(filters);
	}

	@Test(enabled=false)
	public void suite1(){
		RestAssured.baseURI="http://restapi.demoqa.com/utilities/weather/city";
		RequestSpecification httpRequest=RestAssured.given();
		Response response = httpRequest.request(Method.GET,"/Hyderabad");
		String body=response.getBody().asString();
		System.out.println(body);
	}
	
	@Test(enabled=false)
	public void suite2(){
		RestAssured.baseURI="http://restapi.demoqa.com/utilities/weather/city";
		RequestSpecification httpRequest=RestAssured.given();
		Response response = httpRequest.get("/Hyderabad");
		String body=response.getBody().asString();
		System.out.println(body);
		JsonPath jsonPathEvaluator=response.jsonPath();
		String city=jsonPathEvaluator.get("City");
		System.out.println("City:"+city);
		Assert.assertEquals(response.getStatusCode() /*actual value*/, 200 /*expected value*/, "Correct status code returned");
		Headers headers=response.getHeaders();
		Iterator iterator=headers.iterator();
		while (iterator.hasNext()) {
			Header object = (Header) iterator.next();
			System.out.println(object.getName());
		}
	}
	
	@Test
	public void demo2(){
		
	}
	
	public static void getAllEmployees(){
		RestAssured.baseURI="http://dummy.restapiexample.com/api/v1";
		get("/employees").then().statusCode(200);
		Response response=get("/employees");
		System.out.println("Response of getAllEmployees:"+response.getBody().asString());
	}
	
	public static void getParticularEmployee(int id){
		RestAssured.baseURI="http://dummy.restapiexample.com/api/v1";
		//RestAssured.defaultParser=Parser.TEXT;
		get("/employee/"+id).then().statusCode(200).assertThat().body("resuid", equalTo(id));
		//Response response=get("/employees");
		//System.out.println("Response get Employee with "+id +" is :"+response.getBody().asString());
	}
	
	public static void getParticularEmployeeSchemaValidation(int id){
//		JsonSchemaFactory jsonSchemaFactory = JsonSchemaFactory
//		          .newBuilder()
//		          .setValidationConfiguration(
//		            ValidationConfiguration.newBuilder()
//		              .setDefaultVersion(SchemaVersion.DRAFTV4)
//		              .freeze()).freeze();
		RestAssured.baseURI="http://dummy.restapiexample.com/api/v1";
		//RestAssured.defaultParser=Parser.TEXT;
		get("/employee/"+id).then().statusCode(200).assertThat().body(matchesJsonSchemaInClasspath("resources/employee.json").using(settings().with().checkedValidation(false)));
		//Response response=get("/employees");
		//System.out.println("Response get Employee with "+id +" is :"+response.getBody().asString());
	}
	public static void main(String[] args) {
		getParticularEmployeeSchemaValidation(5472);
	}
}

========================
package com.restassured.demo;

import com.jayway.jsonpath.DocumentContext;
import com.jayway.jsonpath.JsonPath;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;

public class TestSuite1 {
	public static void main(String[] args) {
		RestAssured.baseURI="http://restapi.demoqa.com/utilities/weather/city";
		RequestSpecification httprequest=RestAssured.given();
		Response response=httprequest.get("/Hyderabad");
		String str=response.getBody().asString();
		System.out.println(str);
		DocumentContext jsonContext = JsonPath.parse(str);
		String str123=jsonContext.read("$.City");
		System.out.println(str123);
	}
}
