1]	What is Automation Testing?
2]	What are the benefits of Automation Testing?
3]	Why should Selenium be Selected as a tested tool?
4]	What is selenium? What are the Different Selenium Components?
5]	What are the testing types that can be supported by Selenium?
6]	What are the limitations of Selenium?
7]	What is the difference between Selenium IDE, Selenium RC, and WebDriver?
8]	When should I use selenium IDE?
9]	What are the different types of Locators in selenium?
10]	What is the difference between assert and verify commands?
11]	What is an XPath?
12]	What is the difference between “/” and “//” in Xpath?
13]	When should I use Selenium Grid?
14]	What do we mean by Selenium 1 and Selenium 2?
15]	Which is the latest Selenium tool?
16]	How do I launch the browser using WebDriver?
17]	What are the different types of Drivers available in WebDriver?
18]	What are the different types of waits available in WebDriver?
19]	How to type in a textbox using Selenium?
20]	How can you find if an element in displayed on the screen?
21]	How can we get a text of a web element?
22]	How to select value in a dropdown?
23]	What are the different types of navigation commands?
24]	How to handle frame in WebDriver?
25]	When do we use findElement() and findElements()?
26]	How to find more than one web element in the list?
27]	What is the difference between driver.close() and driver.quit command?
28]	Can Selenium handle windows based pop up?
29]	How can we handle web-based pop up?
30]	How can we handle windows based pop up?
31]	How to assert title of the web page?
32]	How to mouse hover on a web element using WebDriver?
33]	How to retrieve CSS properties of an element?
34]	How to capture screenshot in WebDriver?
35]	What is framework?
36]	What are the advantages of Automation framework?
37]	What are the different types of frameworks?
38]	How can I read test data from excels?
39]	What is the difference between POI and jxl jar?
40]	What is the difference between Selenium and QTP?
41]	Can WebDriver test Mobile applications?
42]	Can captcha be automated?
43]	What is Object Repository? How can we create Object Repository in Selenium?
44]	What is Selenium and What it is composed of?
45]	What is Selenium 2.0 ?
46]	Mention what is Selenium 3.0?
47]	How will you find an element using Selenium?
48]	List out the test types that are supported by Selenium?
49]	Explain what is assertion in Selenium and what are the types of assertion?
50]	Mention what is the use of X-path?
51]	Explain the difference between single and double slash in X-path?
52]	List out the technical challenges with Selenium?
53]	What is the difference between type keys and type commands ?
54]	What is the difference between verify and assert commands?
55]	What are the advantages of Selenium?
56]	Why testers should opt for Selenium and not QTP?
57]	 What are the four parameter you have to pass in Selenium?
58]	What is the difference between setSpeed() and sleep() methods?
59]	What is same origin policy? How you can avoid same origin policy?
60]	What is heightened privileges browsers?
61]	How you can use “submit” a form using Selenium ?
62]	 Mention what is the difference between Implicit wait and Explicit wait?
63]	Which attribute you should consider throughout the script in frame for “if no frame Id as well as no frame name”?
64]	Explain what is the difference between find elements () and find element () ?
65]	Explain what is Datadriven framework and Keyword driven?
66]	Explain how you can login into any site if it’s showing any authentication popup for password and username?
67]	Explain how to assert text of webpage using selenium 2.0 ?
68]	What is Object Repository ?
69]	Explain how Selenium Grid works?
70]	Can we use Selenium grid for performance testing?
71]	 List the advantages of Webdriver over Selenium Server?
72]	 Mention what are the capabilities of Selenium WebDriver or Selenium 2.0 ?
73]	While injecting capabilities in webdriver to perform tests on a browser which is not supported by a webdriver what is the limitation that one can come across?
74]	 Explain how you can find broken images in a page using Selenium Web driver ?
75]	Explain how you can handle colors in web driver?
76]	Using web driver how you can store a value which is text box?
77]	Explain how you can switch between frames?
78]	Mention 5 different exceptions you had in Selenium web driver?
79]	Explain using Webdriver how you can perform double click ?
80]	How will you use  Selenium to upload a file ?
81]	Which web driver implementation is fastest?
82]	Explain how you can handle frames using Selenium 2.0 ?
83]	What is the difference between getWindowhandles() and getwindowhandle() ?
84]	Explain how you can switch back from a frame? 	
85]	List out different types of locators?
86]	What is the command that is used in order to display the values of a variable into the output console or log?
87]	Explain how you can use recovery scenario with Selenium?
88]	Explain how to iterate through options in test script?
89]	What is Selenese and what are the types of Selenese ?
90]	 In selenium IDE what are the element locators that can be used to locate elements on web page?
91]	In Selenium IDE how you can generate random numbers and dates for test data ?
92]	Explain what can cause a Selenium IDE test to fail?
93]	What is regular expressions? How you can use regular expressions in Selenium ?
94]	 How will you handle working with multiple windows in Selenium ?
95]	How will you verify the specific position of an web element?
96]	 How can you retrive the message in an alert box ?
97]	Explain what is the main difference between web-driver and RC ?
98]	 Using Selenium how can you handle network latency ?
99]	To enter values onto text boxes what is the command that can be used?
100]	How do you identify an object using selenium?
101]	Mention what are the challenges in Handling Ajax Call in Selenium Webdriver?
102]	Mention what is Listeners in Selenium WebDriver?
103]	Mention what are the types of Listeners in TestNG?
104]	Mention what is desired capability? How is it useful in terms of Selenium?
105]	 Mention when to use AutoIT?
106]	Mention why do you need Session Handling while working with Selenium?
107]	Mention why do you need Session Handling while working with Selenium?
108]	Explain Selenium Architecure?

1 to 43 Link - https://www.softwaretestinghelp.com/selenium-interview-questions-answers/
44 to 107 Link - https://www.guru99.com/top-100-selenium-interview-questions-answers.html
108 Link - https://www.softwaretestingmaterial.com/selenium-webdriver-architecture/
-----------------------------------------------------------------------------------------------------
CommonUtils:
public static WebDriver driver = new FirefoxDriver();

	public static void clickAndHold(WebElement element) {
		Actions actionsBuilder = new Actions(driver).clickAndHold(element);
		Action action = actionsBuilder.build();
		action.perform();
	}
  public static void pressKey(WebElement element) {
		Actions actionsBuilder = new Actions(driver).keyDown(element, Keys.SPACE);
		Action action = actionsBuilder.build();
		action.perform();
	}

	public void select(WebElement element) {
		Select select = new org.openqa.selenium.support.ui.Select(element);
		select.getFirstSelectedOption(); // To get Current selected value

		select.selectByIndex(1);// selecting by index
		select.selectByValue("Text");// Select By Value
		select.selectByVisibleText("I am");
	}
  
  public void switchToActualWindow(WebElement element) {
		String mainWindow = driver.getWindowHandle();
		Set<String> allwindows = driver.getWindowHandles();
		Iterator<String> iterator = allwindows.iterator();
		while (iterator.hasNext()) {
			String childWindow = (String) iterator.next();
			driver.switchTo().window(childWindow);
			if (mainWindow.equalsIgnoreCase(childWindow)) {
				break;
			}
		}
	}

	public static void main(String[] args) {
		WebElement element=driver.findElement(By.xpath(""));
		FluentWait wait = new FluentWait(driver)
				.withTimeout(30, TimeUnit.SECONDS)
				.pollingEvery(5, TimeUnit.SECONDS)
				.ignoring(NoSuchElementException.class);
		wait.until(ExpectedConditions.visibilityOf(element));

		
	}
	-----------------------------------------------------------------------------
	
	
Selenium Architecture:
Selenium Language Bindings / Selenium Client Libraries
Selenium developers have built language bindings/Selenium Client Libraries in order to support multiple languages. For instance, if you want to use the browser driver in java, use the java bindings. All the supported language bindings can be downloaded from the official website (https://www.seleniumhq.org/download/#client-drivers) of Selenium.

JSON Wire Protocol
JSON (JavaScript Object Notation) is an open standard for exchanging data on web. It supports data structures like object and array. So, it is easy to write and read data from JSON. To learn more about JSON, visit https://www.javatpoint.com/json-tutorial
JSON Wire Protocol provides a transport mechanism to transfer data between a server and a client. JSON Wire Protocol serves as an industry standard for various REST web services. To learn more about Web Services, visit https://www.javatpoint.com/web-services-tutorial

Browser Drivers
Selenium uses drivers, specific to each browser in order to establish a secure connection with the browser without revealing the internal logic of browser's functionality. The browser driver is also specific to the language used for automation such as Java, C#, etc.
When we execute a test script using WebDriver, the following operations are performed internally.
o	HTTP request is generated and sent to the browser driver for each Selenium command.
o	The driver receives the HTTP request through HTTP server.
o	HTTP Server decides all the steps to perform instructions which are executed on browser.
o	Execution status is sent back to HTTP Server which is subsequently sent back to automation script.

Browsers
Browsers supported by Selenium WebDriver:
o	Internet Explorer
o	Mozilla Firefox
o	Google Chrome
o	Safari

Different Types of WebDriver Command
WebDriver command

get()
• The command launches a new browser and opens the specified URL in the browser instance
• The command takes a single string type parameter that is usually a URL of application under test
• To the Selenium IDE users, the command may look very much like open command
driver.get("https://google.com");

getClass()
The command is used to retrieve the Class object 
that represents the runtime class of this object
driver.getClass();

getCurrentUrl()
• The command is used to retrieve the URL of the webpage the user is currently accessing 
• The command doesn’t require any parameter and returns a string value
driver.getCurrentUrl();

getPageSource()
• The command is used to retrieve the page source of the webpage the user is currently accessing. If the page has been modified after loading (for example, by Javascript) there is no guarantee that the returned text is that of the modified page.
• The command doesn’t require any parameter and returns a string value
• The command can be used with various string operations like contains() to ascertain the 
presence of the specified string value
boolean result = driver.getPageSource().contains("String to find");

getTitle()
• The command is used to retrieve the title of the webpage the user is currently working on. A null string is returned if the webpage has no title
• The command doesn’t require any parameter and returns a trimmed string value 
String title = driver.getTitle();

getText()
• The command is used to retrieve the inner text of the specified web element
• The command doesn’t require any parameter and returns a string value
• It is also one of the extensively used commands for verification of messages, labels, errors etc displayed 
on the web pages.
String Text = driver.findElement(By.id("Text")).getText();

getAttribute()
• The command is used to retrieve the value of the specified attribute
• The command requires a single string parameter that refers to an attribute whose value we aspire to know and returns a string value as a result.
driver.findElement(By.id("findID")).getAttribute("value");

getWindowHandle()
• The command is used to tackle with the situation when we have more than one window to deal with. 
• The command helps us switch to the newly opened window and performs actions on the new window. 
The user can also switch back to the previous window if he/she desires.

private String winHandleBefore;
winHandleBefore = driver.getWindowHandle();
driver.switchTo().window(winHandleBefore);

getWindowHandles()
• The command is similar to that of “getWindowHandle()” with the subtle difference that it helps to deal with multiple windows i.e. when we have to deal with more than 2 windows.

findElement()
Syntax: WebElement findElement(By by)
Example: driver.findElements(By.xpath("//");
Purpose: Find the first WebElement using the given method.
Parameters: By - The locating mechanism
Returns: The first matching element on the current page
Throws: NoSuchElementException - it will return exception if no matching elements are found

findElements()
Syntax: findElements(By by)
Example: driver.findElements(By.xpath("//");
Purpose: Find all elements within the current page using the given mechanism.
Parameters: By - The locating mechanism to use
Returns: A list of all WebElements, or an empty list if nothing matches

close()
Syntax: void close()
Example: driver.close();
Purpose: Close the current window, if there are multiple windows, it will close the current window which is active and quits the browser if it's the last window opened currently.

quit()
Syntax: void quit()
Example: driver.quit();
Purpose: Quits this driver instance, closing every associated window which is opened.
--------------------------------------------------------------------------------
Different Types of Navigate Command:
	diver.navigate().back() : Takes back to the previous web-Page
	diver.navigate().forward() : Navigate to next web-page, with reference to browse history.
	diver.navigate().refresh() : Reloads the current page.
	diver.navigate().to(“www.google.com”) : Navigate to specified url

Types of Sleep:
There are basically three wait types in Selenium automation:
	Implicit Wait Type
	Explicit Wait Type
	Fluent Wait Type

Implicit Wait:
By default the driver will try to find the element till the time specified. And it goes to all the element.
driver.manage().timeouts().implicitlyWait(2, TimeUnit.SECONDS);

Explicit wait:
The explicit wait is used to tell the Web Driver to wait for certain conditions (Expected Conditions) or the maximum time exceeded before throwing an "ElementNotVisibleException" exception.
WebDriverWait wait=new WebDriverWait(driver, 20);
element=wait.until(ExpectedConditions.visibilityOf(element));
The following are the Expected Conditions that can be used in Explicit Wait
	alertIsPresent()
	elementSelectionStateToBe()
	elementToBeClickable()
	elementToBeSelected()
	frameToBeAvaliableAndSwitchToIt()
	invisibilityOfTheElementLocated()
	invisibilityOfElementWithText()
	presenceOfAllElementsLocatedBy()
	presenceOfElementLocated()
	textToBePresentInElement()
	textToBePresentInElementLocated()
	textToBePresentInElementValue()
	titleIs()
	titleContains()
	visibilityOf()
	visibilityOfAllElements()
	visibilityOfAllElementsLocatedBy()
	visibilityOfElementLocated()
Fluent Wait:
The fluent wait is used to tell the web driver to wait for a condition, as well as the frequency with which we want to check the condition before throwing an "ElementNotVisibleException" exception.
Frequency: Setting up a repeat cycle with the time frame to verify/check the condition at the regular interval of time
WebElement element=driver.findElement(By.xpath(""));
		FluentWait wait = new FluentWait(driver)
				.withTimeout(30, TimeUnit.SECONDS)
				.pollingEvery(5, TimeUnit.SECONDS)
				.ignoring(NoSuchElementException.class);
		wait.until(ExpectedConditions.visibilityOf(element));

All axis Scenario of Xpath
•	Contains()
•	Using OR & AND
•	Start-with function
•	Text()
•	XPath axes methods
o	Following
o	Ancestor
o	Child
o	Preceding
o	Following-sibling
o	Parent
o	Self
o	Descendant
Contains: //th[contains(text(),'Before')]	    
AND: //input[@type='text' and @name='preMealLow']
--------------------------------------------------------------------
Mouse Click & KeyBoard Event: Action Class
Handling special keyboard and mouse events are done using the Advanced User Interactions API. It contains the Actions and the Action classes that are needed when executing these events. The following are the most commonly used keyboard and mouse events provided by the Actions class.

clickAndHold()	
Clicks (without releasing) at the current mouse location.

contextClick()	
Performs a context-click at the current mouse location. (Right Click Mouse Action)

doubleClick()	
Performs a double-click at the current mouse location.

dragAndDrop(source, target)	
Performs click-and-hold at the location of the source element, moves to the location of the target element, then releases the mouse.
Parameters:
source- element to emulate button down at.
target- element to move to and release the mouse at.

dragAndDropBy(source, x-offset, y-offset)	
Performs click-and-hold at the location of the source element, moves by a given offset, then releases the mouse.
Parameters:
source- element to emulate button down at.
xOffset- horizontal move offset.
yOffset- vertical move offset.

keyDown(modifier_key)	
Performs a modifier key press. Does not release the modifier key - subsequent interactions may assume it's kept pressed.
Parameters:
modifier_key - any of the modifier keys (Keys.ALT, Keys.SHIFT, or Keys.CONTROL)

keyUp(modifier _key)	
Performs a key release.
Parameters:
modifier_key - any of the modifier keys (Keys.ALT, Keys.SHIFT, or Keys.CONTROL)

moveByOffset(x-offset, y-offset)	
Moves the mouse from its current position (or 0,0) by the given offset.
Parameters:
x-offset- horizontal offset. A negative value means moving the mouse left.
y-offset- vertical offset. A negative value means moving the mouse down.

moveToElement(toElement)	
Moves the mouse to the middle of the element. 
Parameters:
toElement- element to move to.

release()	
Releases the depressed left mouse button at the current mouse location

sendKeys(onElement, charsequence)	
Sends a series of keystrokes onto the element. 
Parameters:
onElement - element that will receive the keystrokes, usually a text field
charsequence - any string value representing the sequence of keystrokes to be sent

--------------------------------------------------------------------------------------------------------------------------

public static void clickAndHold(WebElement element) {
		Actions actionsBuilder=new Actions(driver).clickAndHold(element);
		Action action=actionsBuilder.build();
		action.perform();
	}
	public static void pressKey(WebElement element) {
		Actions actionsBuilder=new Actions(driver).keyDown(element, Keys.SPACE);
		Action action=actionsBuilder.build();
		action.perform();	
}

Select Class in Selenium
Select select=new org.openqa.selenium.support.ui.Select(element);
select.getFirstSelectedOption(); // To get Current selected value
select.selectByIndex(1);//selecting by index
select.selectByValue("Text");//Select By Value		select.selectByVisibleText("I am");

Working with Multiple windows
public void switchToActualWindow(WebElement element) {
		String mainWindow=driver.getWindowHandle();
		Set<String> allwindows=driver.getWindowHandles();
		Iterator<String> iterator=allwindows.iterator()	;
		while (iterator.hasNext()) {
			String childWindow = (String) iterator.next();
			driver.switchTo().window(childWindow);
			if(mainWindow.equalsIgnoreCase(childWindow)) {
				break;
			}			
		}
	}
 --------------------------------------------------------------------------------------
 Frameworks
What is Selenium Framework?
Selenium Framework is a code structure that helps to make code maintenance easy. Without frameworks, we will place the “code” as well as “data” in the same place which is neither re-usable nor readable. Using Frameworks, produce beneficial outcomes like increased code re-usage, higher portability, reduced script maintenance cost, higher code readability, etc.
Types:
	Data-Driven
	Keyword- Driven
	Hybrid
	Page Object Model
Data-Driven:
In data driven framework all of our test data is generated from some external files like Excel, CSV, XML or some database table.
To read and write data into excel, we have the POI and JXL.

Basic Code:
public static String sheetName;

	public POIDemo(String fileName, String sheetName) {
		this.filePath = System.getProperty("user.dir") + "\\files\\" + fileName;
		this.sheetName = sheetName;
	}
	public Object readFile(int rowNum, int cellNum) {
		Object outPut = null;
		try {
			File file = new File(filePath);
			FileInputStream fileInputStream = new FileInputStream(file);
			HSSFWorkbook workbook = new HSSFWorkbook(fileInputStream);
			HSSFSheet sheet = workbook.getSheet(sheetName);
			HSSFRow row = sheet.getRow(rowNum);
			HSSFCell cell = row.getCell(cellNum);
			if (cell.getCellType() == 1) {
				outPut = cell.getStringCellValue();
			} else if (cell.getCellType() == 0) {
				outPut = cell.getNumericCellValue();
			}
			System.out.println(outPut);
		} catch (Exception e) {
			System.out.println("Exception:" + e.getMessage());
		}
		return outPut;
	}
	
	public boolean writeFile(String data, int rowNum, int cellNum) {
		try {
			File file = new File(filePath);
			FileInputStream fileInputStream = new FileInputStream(file);
			HSSFWorkbook workbook = new HSSFWorkbook(fileInputStream);
			HSSFSheet sheet = workbook.getSheet(sheetName);
			HSSFRow row = sheet.createRow(rowNum);
			HSSFCell cell = row.createCell(cellNum);
			cell.setCellValue(data);
			fileInputStream.close();
			FileOutputStream fileOutputStream=new FileOutputStream(filePath);
			workbook.write(fileOutputStream);
			fileOutputStream.close();
			return true;
		} catch (Exception e) {
			System.out.println("Exception:" + e.getMessage());
			return false;
		}
	}
	
	public static void main(String[] args) {
		POIDemo demo = new POIDemo("Details.xls", "userDetails");
		System.out.println("Value:" + demo.readFile(2, 2));
		demo.writeFile("I am in town", 4, 4);
		
	}
}
----------------------------------------------
Keyword 
Keyword Driven:
In keyword driven test framework, all the operations and instructions are written in some external file like Excel worksheet. Here is how the complete framework looks like
  
Hybrid :
 
--------------------------------------------
Page Object Model:
In the Page Object Model entire application is splitted into Pages and Comonents.
public class HomePage  {
	public static WebDriver driver=new ChromeDriver();

	@FindBy(xpath="//input[@id='save']")
	private WebElement homeTab;

	public WebElement getHomeTab() {
		return homeTab;
	}
public HomePage() {
		PageFactory.initElements(driver, HomePage.class);
	}
	
	public void clickOnHomeTab() {
		getHomeTab().click();
	}
}

-------------------------------------------------------
Exceptions:
 ConnectionClosedException	 This exception takes place when there is a disconnection in the driver.
 ElementClickInterceptedException	 The command could not be completed as the element receiving the events is concealing the element which was requested clicked.
 ElementNotInteractableException	 This Selenium exception is thrown when an element is presented in the DOM but it is impossible to interact with such element.
 ElementNotSelectableException	 This Selenium exception is thrown when an element is presented in the DOM but you can be able to select. Hence, it is impossible to interact with.
 ElementNotVisibleException	 This type of Selenium exception takes place when existing element in DOM has a feature set as hidden. In this situation, elements are there, but you can not see and interact with the WebDriver.
 ErrorHandler.UnknownServerException	 Exception is used as a placeholder if the server returns an error without a stack trace.
 ErrorInResponseException	 This exception is thrown when a fault has occurred on the server side. You can see it happens when interacting with the Firefox extension or the remote driver server.
 ImeActivationFailedException	 This exception occurs when IME engine activation has failed.
 ImeNotAvailableException	 This exception takes place when IME support is unavailable.
 InsecureCertificateException	 Navigation made the user agent to hit a certificate warning, which is caused by an invalid or expired TLS certificate.
 InvalidArgumentException	 This Selenium exception is thrown if an argument does not belong to the expected type.
 InvalidCookieDomainException	 This happens when you try to add a cookie under a different domain rather than the current URL.
 InvalidCoordinatesException	 This happens if the coordinates offered to an interacting operation are not valid.
 InvalidElementStateException	 This Selenium exception occurs if a command cannot be finished as the element is invalid.
 InvalidSessionIdException	 Takes place when the given session ID is not included in the list of active sessions, which means the session does not exist or is inactive either.
 InvalidSwitchToTargetException	 Happens if frame or window target to be switched does not exist.
 JavascriptException	 This problem happens when executing JavaScript supplied by the user.
 JsonException	 Happens when you afford to get the session capabilities where the session is not created.
 MoveTargetOutOfBoundsException	 Takes place if the target provided to the ActionChains move() methodology is not valid. For exampleout of document.
 NoAlertPresentException	 Happens when you switch to no presented alert.
 NoSuchAttributeException	 Occurs when the attribute of element could not be found.
 NoSuchContextException	 Happens in mobile device testing and is thrown by ContextAware.
 NoSuchCookieException	 This exception is thrown if there is no cookie matching with the given path name found amongst the associated cookies of the current browsing context’s active document.
 NoSuchElementException	 Happens if an element could not be found.
 NoSuchFrameException	 Takes place if frame target to be switch does not exist.
 NoSuchWindowException	 Occurs if window target to be switch does not exist.
 NotFoundException	 This exception is subclass of WebDriverException. It happens when an element on the DOM does not exist.
 RemoteDriverServerException	 This Selenium exception is thrown when server do not respond due to the problem that the capabilities described are not proper.
 ScreenshotException	 It is impossible to capture a screen.
 ScriptTimeoutException	 Thrown when executeAsyncScript takes more time than the given time limit to return the value.
 SessionNotCreatedException	 A new session could not be successfully created.
 SessionNotFoundException	 The WebDriver is performing the action right after you quit the browser.
 StaleElementReferenceException	 This Selenium exception happens if the web element is detached from the current DOM.
 TimeoutException	 Thrown when there is not enough time for a command to be completed.
 UnableToCreateProfileException	 You can open a browser with certain options using profiles, but sometimes a new version of Selenium driverserver or browser may not support the profiles.
 UnableToSetCookieException	 Occurs if a driver is unable to set a cookie.
 UnexpectedAlertPresentException	 This Selenium exception happens when there is the appearance of an unexpected alert.
 UnexpectedTagNameException	 Happens if a support class did not get a web element as expected.
 UnhandledAlertException	 It happens when there is an alert, but WebDriver is unable to perform Alert operation.
 UnknownMethodException	 Thrown when the requested command matching with a known URL but not matching with a methodology for that URL.
 UnreachableBrowserException	 This Selenium exception happens if the browser is unable to be opened or have crashed because of some reasons.
 UnsupportedCommandException	 Occurs when remote WebDriver does not send valid command as expected.
 WebDriverException	 This takes place when the WebDriver is performing the action right after you close the browser.







