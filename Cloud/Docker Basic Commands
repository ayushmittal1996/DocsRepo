Details of these Notes From Link:https://docker-curriculum.com/#what-is-docker-

basic checking: 
docker run hello-world

Playing with Busybox:
=====================

$ docker pull busybox     //pull command fetches the busybox image from the Docker registry and saves it to our system
$ docker images          //You can use the docker images command to see a list of all images on your system

$ docker run --help

$ docker run busybox
When you call run, the Docker client finds the image (busybox in this case), loads up the container and then runs a command 
in that container. When we run docker run busybox, we didn't provide a command, so the container booted up, 
ran an empty command and then exited.

$ docker ps
The docker ps command shows you all containers that are currently running.

$ docker ps -a  //all containers that was running earlier and now exited

$ docker run -it busybox  //running the conatiner in interactive mode

Clean containers once you are done with it
$docker rm 305297d7a235 ff0a5c3750b9  //On deletion, you should see the IDs echoed back to you.
$ docker rm $(docker ps -a -q -f status=exited) //If you have a bunch of containers to delete in one go, copy-pasting IDs can be tedious. 
                                         
 In that case, you can simply,  
$ docker run --help
 
Delete images that you no longer need by running,
$ docker rmi
 
Terminology:
==========================
In the last section, we used a lot of Docker-specific jargon which might be confusing to some. So before we go further, let me clarify some terminology that is used frequently in the Docker ecosystem.

Images - The blueprints of our application which form the basis of containers. In the demo above, we used the docker pull command to download the busybox image.
Containers - Created from Docker images and run the actual application. We create a container using docker run which we did using the busybox image that we downloaded. A list of running containers can be seen using the docker ps command.
Docker Daemon - The background service running on the host that manages building, running and distributing Docker containers. The daemon is the process that runs in the operating system to which clients talk to.
Docker Client - The command line tool that allows the user to interact with the daemon. More generally, there can be other forms of clients too - such as Kitematic which provide a GUI to the users.
Docker Hub - A registry of Docker images. You can think of the registry as a directory of all available Docker images. If required, one can host their own Docker registries and can use them for pulling images.
   
Docker Images:
==============
To get a new Docker image you can either get it from a registry (such as the Docker Hub) or create your own. There are tens of thousands of images available on Docker Hub. You can also search for images directly from the command line using docker search.
An important distinction to be aware of when it comes to images is the difference between base and child images.
Base images are images that have no parent image, usually images with an OS like ubuntu, busybox or debian.
Child images are images that build on base images and add additional functionality.
Then there are official and user images, which can be both base and child images.
Official images are images that are officially maintained and supported by the folks at Docker. These are typically one word long. In the list of images above, the python, ubuntu, busybox and hello-world images are official images.
User images are images created and shared by users like you and me. They build on base images and add additional functionality. Typically, these are formatted as user/image-name.                                   
--------------------------------

Inorder to keep the image running at the background d(Detached mode)
docker run -d busybox:latest

***************************************************************************************************************
Docker Commands:

Basic:
========
docker --version

Pull:
=====
docker pull busybox

Run:  [First Pull then Run]
============================
docker run --help                                //To get complete set of options
docker run hello-world
docker run busybox echo "hello from busybox"
docker run -d busybox:1.24 sleep 1000             //Will run in Detach mode
docker run -it busybox sh                        //run command with the -it flags attaches us to an interactive tty in the container
docker run --rm busybox                          //the --rm flag automatically removes the container when it exits
docker run --name helloworld  busybox:1.24
docker run -d -P --name static-site prakhar1989/static-site
-d     : will detach our terminal                   //Even if we close your terminal and the container will keep running.
-P     :will publish all exposed ports to random ports
--name : corresponds to a name we want to give
docker port static-site                           //Now we can see the ports by running the docker port [CONTAINER] command
docker run -p 8888:80 prakhar1989/static-site       //specify a custom port to which the client will forward connections to the container.

Inspect Container Details:
==============================
 docker inspect 74b900ad405b86d702fad020a4a759533a622acba90881277037775db5cceb6d

Stop a Detached Container:
==========================
docker stop static-site


Remove the CONTAINERS:
=======================
docker rm 1431431
docker rm $(docker ps -a -q -f status=exited)
-q : Returns Numeric ID of containers
-f : filters output based on conditions provided


See list of all Images in the system:
========================================
docker images

Remove Images:
================
 docker rmi

Display Containers:
======================
docker ps          //Running Containers
docker ps -a       //All containers running earlier as well as the present


Builting an Image From Docker File:
=====================================
docker login           //Then enter username and password of Docker repository
docker build -t  kingshuknandy/jenkins_centos .


******************************************************************
Advanced:

Run Tomcat Server:
===================
docker run -it -p 8888:8080 tomcat:8.0  //To run on port 8888
docker run -it -d -p 8888:8080 tomcat:8.0  //To run in detach mode

  


