Learn JavaScript Objects:
https://www.w3schools.com/js/js_object_definition.asp
Official Documentation: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Details_of_the_Object_Model

Java Script object with a method
var person = {
    firstName: "John",
    lastName : "Doe",
    id       : 5566,
    fullName : function() {
        return this.firstName + " " + this.lastName;
};
var myFather = new Person("John", "Doe", 50, "blue");
var myMother = new Person("Sally", "Rally", 48, "green");

Object Prototypes:
Prototype Inheritance
All JavaScript objects inherit properties and methods from a prototype.
•	Date objects inherit from Date.prototype. 
•	Array objects inherit from Array.prototype. 
•	Person objects inherit from Person.prototype.
The Object.prototype is on the top of the prototype inheritance chain:
Date objects, Array objects, and Person objects inherit from Object.prototype.

The JavaScript prototype property allows you to add new properties to object constructors:

function Person(first, last, age, eyecolor) {
    this.firstName = first;
    this.lastName = last;
    this.age = age;
    this.eyeColor = eyecolor;
}
Person.prototype.nationality = "English";

The JavaScript prototype property also allows you to add new methods objects constructors:
function Person(first, last, age, eyecolor) {
    this.firstName = first;
    this.lastName = last;
    this.age = age;
    this.eyeColor = eyecolor;
}
Person.prototype.name = function() {
    return this.firstName + " " + this.lastName;
};


Node Good Video Tutorial:
https://www.youtube.com/watch?v=mbzCe1of_Hs

npm init
 
JQuery CallBack Mechanism:
jQuery Callback Functions
JavaScript statements are executed line by line. However, with effects, the next line of code can be run even though the effect is not finished. This can create errors.
To prevent this, you can create a callback function.
A callback function is executed after the current effect is finished.
Typical syntax: $(selector).hide(speed,callback);


<!DOCTYPE html>
<html>
<head>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<script>
$(document).ready(function(){
    $("button").click(function(){
        $("p").hide(1000);
        alert("The paragraph is now hidden");
    });
});
</script>
</head>
<body>
<button>Hide</button>
<p>This is a paragraph with little content.</p>
</body>
</html>

$(document).ready(function(){
    $("button").click(function(){
        $("p").hide(1000);
        alert("The paragraph is now hidden");
    });
});





 
Node  JS:
Node.js® is a JavaScript runtime built on Chrome's V8 JavaScript engine. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient. Node.js' package ecosystem, npm, is the largest ecosystem of open source libraries in the world.
DOCS: https://nodejs.org
Q1.	What is Module?
Ans:
To execute a node program:
Node has to be installed node -versionnode checker.js
Codes:

Detail Description of the Projects:
Initial Project:  Node-app
1] 01_helloNodeWorld.js
console.log("Hello world");

for (let index = 0; index < 10; index++) {
    console.log("Iterator:"+index);
}

var a={
    'name':'kingshuk',
    'age': '26'
}

console.log(a);

2] 02_dataTypes.js
//Order of eval and how stirng affects the eval
var x = 16 + "Volvo";
console.log(x);

var x = "16" + "Volvo";
console.log(x);

var x = 16 + 4 + "Volvo";
console.log(x);

var x = "Volvo" + 16 + 4;
console.log(x);

//Double v/s Single Quotes
var answer = "It's alright";             // Single quote inside double quotes
console.log(answer);

var answer = "He is called 'Johnny'";    // Single quotes inside double quotes
console.log(answer);

var answer = 'He is called "Johnny"';    // Double quotes inside single quotes
console.log(answer);

//Numbers
var x1 = 34.25;     // Written with decimals
console.log(x1);

var x2 = 34;        // Written without decimals
console.log(x2);

var y = 123e5;      // 12300000
console.log(y);

var z = 123e-5;     // 0.00123
console.log(z);

//Array
var cars = [ "Saab", "Volvo", "BMW" ];// Now x is a array
console.log(cars);
console.log("Type:"+typeof cars);

//Typeof examples on various datatypes
var yy;               // Now y is undefined
console.log(typeof yy);

var x = 5;           // Now x is a Number
console.log(typeof x);

var x = 3.14;           // Now x is a Number
console.log(typeof x);

var x = "John";      // Now x is a String
console.log(typeof x);

var x = false;           // Now x is a boolean
console.log(typeof x);

var x = true;           // Now x is a boolean
console.log(typeof x);

var x = {name:'John', age:34};           // Now x is a object
console.log(typeof x);

//Null and undefined
var person1 = null;           // Value is null, but type is still an object
console.log(typeof person1);

var person2 = undefined;     // Value is undefined, type is undefined
console.log(typeof person2);

console.log();

02_objects1.js
var employee={

    id : 2343,
    name: "Kingshuk",
    employeecard : function(){
        return this.id + "   "+this.name;
    }
}

console.log(employee.employeecard());

var myHonda={
color:"red",
wheels:4,
engine: {cylinders:4,size:2.22},
getInfo : function(){
        var result="A beautiful "+this.color + " car with "+this.engine.cylinders+" cylinders with "+this.engine.size+" size";
        console.log(result);
        }
}

console.log(myHonda);
myHonda.getInfo();

var myMaruti={
    color : "green",
    wheels:4,
     engine: {cylinders:4 ,size:2.2},
}

console.log(myMaruti);
console.log(myMaruti.color);
console.log(myMaruti.wheels);
console.log(myMaruti.engine.size);

04] 02_objects2.js[JavaScript Constructor Use & Prototype Explanation]

function Car(pColor,pWheels,pEngine){
    this.color=pColor;
    this.wheels=pWheels;
    this.engine=pEngine;
function Car(pColor,pWheels,pEngine){
    this.color=pColor;
    this.wheels=pWheels;
    this.engine=pEngine;
    this.drive=function(mode){
        console.log("Driving in : "+mode+" Mode");
    }
}

Car.prototype.getInfo = function(){
    var result="A Beautiful " + this.color+" car with "+this.engine.cylinders+" cylinders " + this.engine.size;
    console.log(result);
}

Car.pat=20;

var honda=new Car("red",4,{cylinders:4,size:2.2});
console.log(honda);
honda.drive("fast");
honda.getInfo();
console.log(honda.pat);//here this will be undefined since you have not defined Car.prototype.pat

03_moduleExport[Export a js file and use it some other file]
Cals.js
var Calculator = {
    add : function (a,b) {
        return a+b;
    },

    sub : function (a,b) {
        return a-b;
    },

    mul : function (a,b) {
        return a*b;
    }
}

var tempFunction=function () {      //this is basically a function which is assigned to  
                                     //a variable without name 
    return "This is Temp function";
};

var tempVar="This is not visible";

module.exports=Calculator;
module.exports.newFunction=tempFunction;  //We have to give the function a name inorder to access
module.exports.tempVar=tempVar;

For accessing the module:
var calc=require("./calc.js");

console.log(calc);

console.log("2+3 =" + calc.add(2,3));
console.log("2-3 =" + calc.sub(2,3));
console.log("2*3 =" + calc.mul(2,3));

console.log(calc.newFunction());
console.log(calc.tempVar);
Node JS Features:
•	Non-Blocking IO.
•	Event Looping
Q1.	What is the difference between Blocking(Synchronous Call ) and Non-Blocking (Asynchronous)?
Ans:

Here there is a synchronous call, till the DB returns the thread is blocked.
// Example 1 - Synchronous (blocks)
var result = database.query("SELECT * FROM hugetable");
console.log("Query finished");
console.log("Next line");

Output:
Query finished
Next line

Here Asynchronous Call[Non-Blocking]- So multi-threading possible
// Example 2 - Asynchronous (doesn't block) 
database.query("SELECT * FROM hugetable", function(result) {
    console.log("Query finished");
});
console.log("Next line");

    Next line
Query finished
04_readFile:
var fs=require('fs');
var args=process.argv.length; //No of arguments passed in the command line

console.log(process.argv);//Pring the argumets array

if(args < 3){  //Checking the no of i/p arguments from commandline is 3
  console.log("Usage: node 04_readFile.js  <file>");  
  process.exit(1);
}

var total= 0;
for(i=2;i<args;i++){
  console.log(i);  
  total ++;
}

console.log("Total # of args provided to this program were: "+ total);

var fileToRead=process.argv[2]; //file to read
var contents=fs.readFileSync(fileToRead);
var lines=contents.toString().split('\n').length;
console.log(fileToRead  + " had "+ lines + " lines in it");

Q2.	What are callbacks?
Ans:  A callback function is another function that can be passed as an argument to another function, and it is usually evoked after some kind of event.

Very Good Explanation: https://www.youtube.com/watch?v=haz4SBcEYAw

Callbacks:
A callback is a function passed to some asynchronous process that should be called when the process has completed.

Callbacks are just a specific case of functions being passed as a parameter in JavaScript.

Anatomy of Callback:
•	By convention, we pass the callback as the last parameter to any asynchronous function.
(param1, param2, … callback)
•	The callback should always expect parameters in the form of (error, … otherReturnedValues)

05_fileFilterASync:
var fs=require("fs");
var path=require("path");
var noOfFiles1=0;
var filterListInSync=function anyNameorWithouName(dir,filterstr,callback) {
    fs.readdir(dir,function(err,list) {
        if(err){
            return callback(err);
        }

        list=list.filter(function(file) {
            noOfFiles1++;
            console.log("::"+noOfFiles1);
            return path.extname(file) === "."+filterstr;
        });

        console.log("call solution provided");
        callback(null,list);
    });
}
//callbackFunction(error, ...otherReturnedValues)
function fileFilterCallback(err,list) {
    console.log("=======");
    if (err) {
        return console.log("Error occured : ",err);
    } 

    var noOfFiles=0;
    list.forEach(function(file){
        noOfFiles ++;
    });
    console.log("Total no of files" + noOfFiles);
}

var dir=process.argv[2];
var filterstr=process.argv[3];

filterListInSync(dir,filterstr,fileFilterCallback);
//mainFunction(parameter1,parameter2,callbackFunction)

//run command: node   05_fileFilterASync.js  "D:\Node Workspace\node-app"  js
//it will count the no of files with js extention

qrCodeDemo.js :

First you need to install the Module qr-image
Command : npm install qr-image -G

Then Run the code:
var qr=require('qr-image');
var qr=require('qr-image');
var fs=require('fs');

var code=qr.image('https://developer.mozilla.org/en-US/',
    {type : 'svg'});

    var output=fs.createWriteStream('fmQrcode.svg');
    code.pipe(output);
 The QR- Image will be generated for the given Website.
Scan it with a scanner.

Launching Hello world Web server:
======================================
