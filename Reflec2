* Object obj=new Employee();
			Class runtimeEmployee=obj.getClass(); 
		* Class runtimeEmployee=Employee.class;
		*try {
			Class runtimeEmployee = Class.forName("com.Employee");
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} 
    String simpleName=runtimeEmployee.getSimpleName(); 		//Output: Employee
		String name=runtimeEmployee.getName(); 					//Output: com.Employee
		String cannonicaName=runtimeEmployee.getCanonicalName();//Output: com.Employee

    Field field1[]=runtimeEmployee.getDeclaredFields();//-->All Methods
		Field field2[]=runtimeEmployee.getFields();			//-->Get all possible public Methods
		
		Method method1[]=runtimeEmployee.getDeclaredMethods();
		Method method2[]=runtimeEmployee.getMethods();
    
    Constructor cons1[]=runtimeEmployee.getDeclaredConstructors();
		Constructor cons2[]=runtimeEmployee.getConstructors();
		for (int i = 0; i < cons2.length; i++) {
			System.out.println(cons2[i].getName());  //For getting constructor names
		}
                        //We can determine the modifiers used on a class by calling the getModifiers method which returns an Integer. 
		Each modifier is a flag bit which is either set or cleared.
		The java.lang.reflect.Modifier class offers static methods that analyze the returned Integer for the presence 
		or absence of a specific modifier.---------------
