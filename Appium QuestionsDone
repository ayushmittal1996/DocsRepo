1]	What is Appium and why do you need it?
2]	What’s that one point which made you choose Appium for mobile app testing?
3]	How many types of apps do you know?
4]	What are all the pre-requisites for setting up Appium?
5]	Why should you use Appium? List down some of its advantages.
6]	What are the known limitations of Appium?
7]	What would you prefer to test on real devices or use simulators/emulators?
8]	How do the tests run on simulators/emulators?
9]	What are the key design concepts behind Appium?
10]	Which are the test frameworks that Appium supports?
11]	What are the essentials for writing the Appium tests?
12]	How would you retrieve a DOM element or the XPath in a mobile app?
13]	What is Appium inspector and why is it used?
14]	What are the probable errors you might see while working with Appium?
15]	What’s the alternative way to interact with mobile apps while using Appium?
16]	Can you run multithreaded tests in Appium?
17]	Does it require an <.apk> file for automating tests in Appium?
18]	How to debug failures in Appium test automation?
19]	Which are the Selenium commands to use with Appium?
20]	Does it require a server node to execute Appium tests?



1 to 20 - https://www.techbeamers.com/selenium-interview-appium-questions-and-answers/#q1

For setting up adb devices we need to have the following path,
------------------------------------------------------------
C:\Users\kingshuk.nandy\AppData\Local\Android\Sdk\platform-tools;
C:\Users\kingshuk.nandy\AppData\Local\Android\Sdk\tools\bin;


Then Install Appium:
--------------------------
The Basic Properties Required to be set in Appium
{
  "deviceName": "65e9e0450803",
  "appPackage": "com.automationtest",
  "appActivity": "com.automationtest.MainActivity",
  "platformName": "android"
}

Install via Adb command:
-----------------------
adb install appname


How to get App Details:
------------------------
Method 1.
Then Open the app in device,
Then fire the command from Command Prompt
adb shell "dumpsys window windows | grep -E 'mCurrentFocus|mFocusedApp'"
Results**com.automationtest/com.automationtest.MainActivity


Method 2:
aapt dump badging AppApkName.apk
OR
./ aapt dump badging AppApkName.apk

Method 3:
APK Info:

Add the following Jar:
  <dependency>
		    <groupId>io.appium</groupId>
		    <artifactId>java-client</artifactId>
		    <version>4.1.2</version>
		</dependency>
    
 ++++++++++++++++++++++++++++++++++++++++++   
driver.capabilities.platformName=android
driver.capabilities.deviceName=emulator-5554
driver.capabilities.appPackage=com.jquiz.act
driver.capabilities.appActivity=com.jquiz.act.StartActivity

driver.capabilities.applicationName=ACT Test
driver.capabilities.driverClass=io.appium.java_client.android.AndroidDriver
driver.additional.capabilities = {'autoAcceptAlerts':true,'autoLaunch':true}

env.baseurl=http://localhost:4723/wd/hub
step.provider.pkg=com.acttest.steps
remote.server=localhost
remote.port=4723
driver.name=appiumDriver
++++++++++++++++++++++++++++++++++++++++++++++

Normal Format:
		DesiredCapabilities capabilities=new DesiredCapabilities();
		capabilities.setCapability(MobileCapabilityType.AUTOMATION_NAME, "Appium");
		capabilities.setCapability(MobileCapabilityType.PLATFORM_NAME,"Android");
		//apabilities.setCapability(MobileCapabilityType.PLATFORM_VERSION,"");
		capabilities.setCapability(MobileCapabilityType.DEVICE_NAME,"65e9e0450803");
		capabilities.setCapability(AndroidMobileCapabilityType.APP_PACKAGE,"com.automationtest");
		capabilities.setCapability(AndroidMobileCapabilityType.APP_ACTIVITY,"com.automationtest.MainActivity");

		AndroidDriver driver=new AndroidDriver(new URL("http://127.0.0.1:4723/wd/hub"),capabilities);
		System.out.println("Driver Launch");
		
		-------------------------------------------

----------- How to check if device is connected to internet in appium?  -----------
Approach 1 (This will check if connection is there or not) - 
	use below command in command prompt
	->  adb shell dumpsys connectivity | grep NetworkInfo
	This will give you output something like this
	-> NetworkInfo: type: WIFI[], state: CONNECTED/CONNECTED

Approach 2 (This will check if internet os there or not)

	public static boolean isNetworkAvailable(Context c) {
	    NetworkInfo netInfo = null;
	    try {
		ConnectivityManager cm = (ConnectivityManager) c
			.getSystemService(Context.CONNECTIVITY_SERVICE);
		netInfo = cm.getActiveNetworkInfo();
	    } catch (SecurityException e) {
		e.printStackTrace();
	    }
	    return netInfo != null && netInfo.isConnectedOrConnecting();
	}
	public static boolean hasInternetAccess(Context context) {
	    if (isNetworkAvailable(context)) {
		try {
		    HttpURLConnection urlc = (HttpURLConnection) 
			(new URL("http://clients3.google.com/generate_204")
			.openConnection());
		    urlc.setRequestProperty("User-Agent", "Android");
		    urlc.setRequestProperty("Connection", "close");
		    urlc.setConnectTimeout(1500); 
		    urlc.connect();
		    return (urlc.getResponseCode() == 204 &&
				urlc.getContentLength() == 0);
		} catch (IOException e) {
		    Log.e(TAG, "Error checking internet connection", e);
		}
	    } else {
		Log.d(TAG, "No network available!");
	    }
	    return false;
	}



