//Asci is of 7 bits
		//So range 2^7=128
		//Range from 0 to 127
		for (int i = 0; i <= 127; i++) {
			//%d numeric Values
			//%c character Values
			//printf For printing a format
			System.out.printf("%d : %c \n",i,i);
      ------------------------------------------
      public static void sort(int a[]) {
		for (int i = 0; i < a.length-1; i++) {
			for (int j = 0; j < a.length-1-i; j++) {
				if(a[j]<a[j+1]) {
					int b=a[j];
					a[j]=a[j+1];
					a[j+1]=b;
				}
			}
		}
    
		for (int i = 0; i < a.length; i++) {
			System.out.println(a[i]);
		}
	}
    -------------------
    ------------------------------------
    public static int randomNumberbetween(int a, int b) {
		return (int) (Math.random() * b + a);
	}
  ------------------------------------------------
  public static boolean numberPerfectorNot(int num) {

		int sum = 0;
		for (int i = 1; i < num; i++) {
			if (num % i == 0)
				sum = sum + i;
		}
		if (num == sum)
			return true;
		else
			return false;

	}
  ----------------
  public static int[] fibonaciSeries(int min,int max) {
		int arr[]=new int[max-1];
		arr[0]=min;
		arr[1]=min;
		for (int i =2 ; i <=max; i++) {
			arr[i]=arr[i-1]+arr[i-2];
			if(arr[i]>=max)break;
		}
		for (int i = 0; i < arr.length; i++) {
			System.out.println(arr[i]);
		}
		return arr;		
	}
  ------------------------------------------------------
  public static List<Integer> fibonaciSeriesList(int min,int max) {
		List<Integer> list=new ArrayList<>();
		list.add(min);
		list.add(min);
		int a=min;
		int b=min;
		int c;
		for (int i = 0; i < max; i++) {
			c=a+b;
			if(c>=max)break;
			else
				list.add(c);
			a=b;
			b=c;
			
			
		}
    Iterator iterator=list.iterator();
		while (iterator.hasNext()){
			System.out.println(iterator.next());
		}
		return list;		
	}
  ---------------------------------------------------------
  public static int factorial(int num) {
		int m=1;
		for (int i = num; i >= 1; i--) {
			m=m*i;
		}
		System.out.println("Factorial of "+num+ " is:"+m);
		return m;
	}
  ---------------------------------------------------------
  public static void swap(int a,int b) {
		int m=a;
		int n=b;
		a=a+b;
		b=a-b;
		a=a-b;
		System.out.println("Previous a="+m+", b="+n+" . Now a="+a+", b="+b);
	}
  =======================================
  public static int[] sort(int arr[],String desc) {
		int a;
		int b;
		if(desc.toLowerCase().contains("ascending")) {
			for (int i = 0; i < arr.length-1; i++) {
//				if(arr[i]>arr[i+1]) {
//					arr[i]=arr[i]+arr[i+1];
//					arr[i+1]=arr[i]-arr[i+1];
//					arr[i]=arr[i]-arr[i+1];
//				}
				for (int k = 0; k < arr.length-i-1; k++) {
					if(arr[k]>arr[k+1]) {
						arr[k]=arr[k]+arr[k+1];
						arr[k+1]=arr[k]-arr[k+1];
						arr[k]=arr[k]-arr[k+1];
					}
          }
			}
		}else{
			for (int i = 0; i < arr.length-1; i++) {
				for (int k = 0; k < arr.length-i-1; k++) {
					if(arr[k]<arr[k+1]) {
						arr[k]=arr[k]+arr[k+1];
						arr[k+1]=arr[k]-arr[k+1];
						arr[k]=arr[k]-arr[k+1];
					}
				}
			}
		}
    for (int j = 0; j < arr.length; j++) {
			System.out.println(arr[j]);
		}
		return arr;	
	}
	---------------------------
  public static void reverseNumber(int num) {
		int actual=num;
		int s=0;
		int k=0;
		while (num>0) {
			k=num%10;
			s=s*10+k;
			num=num/10;	
		}
		
		System.out.println("Actual Number:"+actual+". Reversed Number: "+s);
		
	}
  ---------------------------------------------------------------------------------
  public static void sort(int[] arr) {
		for (int i = 0; i <= arr.length-1; i++) {
			for (int j = 1; j <=arr.length-1-i; j++) {
				if(arr[j]>arr[j-1]) {
					arr[j]=arr[j]+arr[j-1];
					arr[j-1]=arr[j]-arr[j-1];
					arr[j]=arr[j]-arr[j-1];
				}
			}
		}
		
		for (int i = 0; i < arr.length; i++) {
			System.out.println(arr[i]);
		}
	}
	----------------------------------------------------------------------------
	public static void pattern1() {
		for (int i = 1; i <= 4; i++) {
			for (int j = 1; j <= 4; j++) {
				System.out.print("*");
			}
			System.out.println();
		}
	}
	
	****
	****
	****
	****
	-------------------------------------------------------
	public static void pattern2() {
		for (int i = 1; i <= 4; i++) {
			for (int j = 1; j <= i; j++) {
				System.out.print("*");
				;
			}
			System.out.println();
		}
	}
	*
	**
	***
	****
	------------------------------------------------------------
	public static void pattern3() {
		int s = 4;
		for (int i = 1; i <= 4; i++) {
			for (int j = 1; j <= s; j++) {
				System.out.print("*");
			}
			s--;
			System.out.println();
		}
	}
	****
	***
	**
	*
	-----------------------------------------------------------
		public static void pattern4() {
		int s = 4;
		for (int i = 1; i <= 4; i++) {
			for (int j = 1; j <= 4; j++) {
				if (j >= s) {
					System.out.print("*");
				} else {
					System.out.print(" ");
				}
			}
			s--;
			System.out.println();
		}
	}
	   *
	  **
	 ***
	****
	--------------------------------------------------------------------
	public static void pattern5() {
		int s = 0;
		for (int i = 1; i <= 4; i++) {
			for (int j = 1; j <= 4; j++) {

				if (j <= s) {
					System.out.print(" ");
				} else {
					System.out.print("*");
				}

			}
			s++;
			System.out.println();
		}
	}
	****
	 ***
	  **
	   *
	-------------------------------------------------
		public static void pattern6() {
		int s = 0;
		for (int i = 1; i <= 4; i++) {
			for (int j = 1; j <= 4; j++) {
				if ((j + s) > 4)
					System.out.print(j + s - 4);
				else
					System.out.print(j + s);
			}
			s++;
			System.out.println();
		}
	}
	1234
	2341
	3412
	4123
	-----------------------------------------------------
	public static void pattern7() {
		int s = 0;
		for (int i = 1; i <= 4; i++) {
			for (int j = 1; j <= i; j++) {
				if ((j + s) % 2 == 0)
					System.out.print(0);
				else
					System.out.print(1);
			}
			s++;
			System.out.println();
		}
	}
	1
	01
	101
	0101
	------------------------------------------------------------
	public static void pattern8() {

		for (int i = 1; i <= 7; i++) {
			for (int j = 1; j <= i; j++) {
				if ((i+j)>7) {
					break;
				}
				System.out.print("*");
			}
	
			System.out.println();
		}
	}
	
	*
	**
	***
	***
	**
	*
	-----------------------------------------------------------------------------
	public static void pattern9() {
		int s=7;
		for (int i = 1; i <= 7; i++) {
			for (int j = 1; j <=7; j++) {
				
				if(j>=s) {
					System.out.print(" ");
				}else
				System.out.print("*");
			}
			s--;
	
			System.out.println();
		}
	}
	****** 
	*****  
	****   
	***    
	**     
	*      
    --------------------------------------------------------
    public static void pattern10() {
		int s=7;
		for (int i = 1; i <= 7; i++) {
			for (int j = 1; j <=7; j++) {
				if(j>=s) {
					System.out.print("*");
				}else
				System.out.print(" ");
			}
			s--;
	
			System.out.println();
		}
	}
	      *
	     **
	    ***
	   ****
	  *****
	 ******
	*******
---------------------------------------------------------------
public static String removeWhiteSpace(String str) {
		String out = "";
		for (int i = 0; i < str.length(); i++) {

			if (!(str.charAt(i) == ' ')) {
				out = out + str.charAt(i);
			}
		}
		System.out.println(out);
		return out;
	}
--------------------------------------	
	public static String reverse(String str) {
		String out = "";
		for (int i = str.length()-1; i >=0; i--) {
				out = out + str.charAt(i);
		}
		System.out.println(out);
		return out;
	}
---------------------------------------------------------
public static void anagramChecker(String s1,String s2) {
		char arr[]=s1.toCharArray();
		Arrays.sort(arr);
		String str11=new String(arr);
		char arr2[]=s2.toCharArray();
		Arrays.sort(arr2);
		String str22=new String(arr2);
		System.out.println(str11+"  "+str22);
		
		System.out.println("==>"+str11==str22);
		System.out.println("==>"+str11.equals(str22));
		System.out.println("==>"+str11.contentEquals(str22));
	}
--------------------------------------------------------------
public static boolean anagram(String s1, String s2) {
		char temps1[] = s1.toCharArray();
		Arrays.sort(temps1);
		String s1sorted = new String(temps1);

		char temps2[] = s2.toCharArray();
		Arrays.sort(temps2);
		String s2sorted = new String(temps2);
		System.out.println(s1sorted + "     " + s2sorted);
		if (s1sorted.contentEquals(s2sorted)) {
			System.out.println("Is a anagram");
		} else {
			System.out.println("Not a anagram");
		}
		return false;

	}
	-----------------------------------------------------------
	public static void sortTheStatement(String str) {
		String arr[] = str.trim().split("\\s");

		for (int i = 0; i < arr.length - 1; i++) {
			for (int j = 0; j < arr.length - 1 - i; j++) {
				if (arr[j].compareTo(arr[j + 1]) > 0) {
					String temp = arr[j];
					arr[j] = arr[j + 1];
					arr[j + 1] = temp;
				}
			}
		}
		for (int m = 0; m < arr.length; m++) {
			System.out.println(arr[m]);
		}

	}
----------------------------------------------------------------
public static void coutChar(String str) {
		char arr[] = str.trim().replaceAll("\\s", "").toLowerCase().toCharArray();
		Map<Character, Integer> map = new HashMap<>();
		for (int i = 0; i < arr.length; i++) {
			if (map.containsKey(arr[i])) {

				map.put(arr[i], map.get(arr[i]) + 1);
			} else {
				map.put(arr[i], 1);
			}
		}

		Set<Character> keys = map.keySet();
		for (Character key : keys) {
			System.out.println(key + " : " + map.get(key));
		}
	}
------------------------------------------------------------------------
public static void coutWord(String str1) {
		String arr[] = str1.trim().split("\\s");
		Map<String, Integer> map = new HashMap<>();
		for (int i = 0; i < arr.length; i++) {
			if (map.containsKey(arr[i].toLowerCase())) {

				map.put(arr[i].toLowerCase(), map.get(arr[i].toLowerCase()) + 1);
			} else {
				map.put(arr[i].toLowerCase(), 1);
			}
		}

		Set<String> keys = map.keySet();
		for (String key : keys) {
			System.out.println(key + " : " + map.get(key));
		}

	}
	----------------------------------------------------------------------------
	public static void swapString(String input1, String input2) {
		System.out.println("Before Swap:" + input1 + "|" + input2);
		input2 = input1 + input2;
		input1 = input2.substring(input1.length(), input2.length());
		input2 = input2.replace(input1, "");
		System.out.println("AfterSwap:" + input1 + "|" + input2);
	}
	-------------------------------------------------------------------------
	public static void stringReverse(String str) {
		String reverse = "";
		for (int i = str.length() - 1; i >= 0; i--) {
			reverse = reverse + str.charAt(i);
		}
		System.out.println("Actual:" + str + "|" + "Reverse:" + reverse);
	}
	--------------------------------------------------------------------------
	public static void removeSpaces(String str) {
		String spaceRemoved = "";
		for (int i = 0; i < str.length(); i++) {
			if (!(str.charAt(i) == ' ') && !(str.charAt(i) == '.')) {
				spaceRemoved = spaceRemoved + (str.charAt(i));
			}
		}
		System.out.println("Original:" + str + "|" + "SpaceTrimmed:" + spaceRemoved);
	}
	--------------------------------------------------------------------------
	public static int formatArrange(int a) {
		String inputString = new String(Integer.toString(a));
		String revString="";
		for (int i = inputString.length() - 1; i >= 0; i--) {
			revString=revString+inputString.charAt(i);
		}
		String out="";
		for (int i = 0; i < inputString.length(); i++) {
			out=out+inputString.charAt(i);
			if (out.length()==inputString.length()) {
				break;
			}
			out=out+revString.charAt(i);
			if (out.length()==inputString.length()) {
				break;
			}
			
		}
		System.out.println("Actual:"+a+" | "+"Modified:"+Integer.parseInt(out));
		return Integer.parseInt(out);
	}
	---------------------------------------------------------------------------
	public static int printFormatSame(int a) {
		String str=new String(Integer.toString(a));
		String rev="";
		String out="";
		for (int i = str.length()-1; i >=0; i--) {
			rev=rev+str.charAt(i);
		}
		for (int i = 0; i < rev.length(); i++) {
			out=out+str.charAt(i);
			if(out.length()==str.length())break;
			out=out+rev.charAt(i);
			if(out.length()==str.length())break;
		}
		System.out.println("Actual:"+a+" | "+"Modified:"+Integer.parseInt(out));
		return Integer.parseInt(out);
	}
